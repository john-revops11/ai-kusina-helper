import React, { useState, useEffect } from 'react';
import { ChevronLeft, Database, Loader2, Utensils, AlertCircle, BookOpen, FileUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Link } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { databasePopulationService } from '@/services/databasePopulationService';
import { Progress } from '@/components/ui/progress';

const AdminPage = () => {
  const [isPopulating, setIsPopulating] = useState(false);
  const [recipeCount, setRecipeCount] = useState(10); // Default to 10 recipes
  const { toast } = useToast();
  const [populationProgress, setPopulationProgress] = useState(0);
  const [populatedCount, setPopulatedCount] = useState(0);
  const [populationStatus, setPopulationStatus] = useState('');

  useEffect(() => {
    if (!isPopulating) {
      setPopulationProgress(0);
      setPopulatedCount(0);
      setPopulationStatus('');
    }
  }, [isPopulating]);

  const handlePopulateDatabase = async () => {
    if (isPopulating) return;
    
    const confirm = window.confirm(
      `This will populate your Firebase database with ${databasePopulationService.philippineRecipes.length} Philippine recipe data generated by AI. ` +
      'This process may take several minutes to complete and will use your Gemini API quota. Continue?'
    );
    
    if (!confirm) return;
    
    setIsPopulating(true);
    setPopulationStatus('Initializing...');
    
    try {
      await databasePopulationService.populateAllRecipes((current, total, recipe) => {
        const progress = Math.round((current / total) * 100);
        setPopulationProgress(progress);
        setPopulatedCount(current);
        setPopulationStatus(`Populating ${recipe || 'recipes'}...`);
      });
      
      toast({
        title: 'Success',
        description: 'Database population completed successfully!',
      });
    } catch (error) {
      console.error('Database population error:', error);
      toast({
        title: 'Error',
        description: 'Failed to populate database. See console for details.',
        variant: 'destructive'
      });
    } finally {
      setIsPopulating(false);
    }
  };
  
  const handlePopulateSingleRecipe = async () => {
    if (isPopulating) return;
    
    const recipeName = window.prompt('Enter the name of the Philippine recipe to populate:');
    if (!recipeName) return;
    
    setIsPopulating(true);
    setPopulationStatus(`Populating ${recipeName}...`);
    
    try {
      await databasePopulationService.populateSingleRecipe(recipeName);
      toast({
        title: 'Success',
        description: `Recipe "${recipeName}" has been populated`,
      });
    } catch (error) {
      console.error('Recipe population error:', error);
      toast({
        title: 'Error',
        description: `Failed to populate recipe "${recipeName}"`,
        variant: 'destructive'
      });
    } finally {
      setIsPopulating(false);
    }
  };
  
  const handlePopulateMultipleRecipes = async () => {
    if (isPopulating) return;
    
    const allRecipes = databasePopulationService.philippineRecipes;
    const recipesToPopulate = allRecipes.slice(0, recipeCount);
    
    const confirm = window.confirm(
      `This will populate your Firebase database with ${recipeCount} Philippine recipe data generated by AI. ` +
      'This process may take several minutes to complete and will use your Gemini API quota. Continue?'
    );
    
    if (!confirm) return;
    
    setIsPopulating(true);
    setPopulationStatus('Initializing categories...');
    
    try {
      await databasePopulationService.populateCategories();
      
      let populatedRecipes = 0;
      for (const recipe of recipesToPopulate) {
        setPopulationStatus(`Populating ${recipe}...`);
        setPopulationProgress(Math.round((populatedRecipes / recipesToPopulate.length) * 100));
        setPopulatedCount(populatedRecipes);
        
        toast({
          title: 'Processing',
          description: `Populating recipe: ${recipe}...`,
        });
        
        try {
          await databasePopulationService.populateSingleRecipe(recipe);
          populatedRecipes++;
        } catch (error) {
          console.error(`Error populating ${recipe}:`, error);
          toast({
            title: 'Warning',
            description: `Skipped recipe "${recipe}" due to an error`,
            variant: 'destructive'
          });
          continue;
        }
      }
      
      setPopulationProgress(100);
      setPopulatedCount(populatedRecipes);
      
      toast({
        title: 'Success',
        description: `${populatedRecipes} out of ${recipeCount} recipes have been populated successfully!`,
      });
    } catch (error) {
      console.error('Multiple recipes population error:', error);
      toast({
        title: 'Error',
        description: 'Failed to populate multiple recipes. See console for details.',
        variant: 'destructive'
      });
    } finally {
      setIsPopulating(false);
    }
  };

  return (
    <div className="container mx-auto p-4 max-w-md">
      <Link to="/" className="flex items-center gap-1 mb-4 text-sm text-muted-foreground hover:text-foreground">
        <ChevronLeft size={16} />
        <span>Back to home</span>
      </Link>
      
      <Card className="mb-4">
        <CardHeader>
          <CardTitle>Database Administration</CardTitle>
          <CardDescription>
            Populate your Firebase database with Philippine recipe data.
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          <div className="bg-muted p-4 rounded-lg text-sm">
            <p>This utility uses Gemini AI to generate data for:</p>
            <ul className="list-disc pl-5 mt-2 space-y-1">
              <li>Recipe information</li>
              <li>Ingredients with quantities</li>
              <li>Step-by-step cooking instructions</li>
              <li>Ingredient substitutions</li>
            </ul>
            <div className="mt-3 flex items-center text-amber-600 gap-2">
              <AlertCircle className="h-4 w-4" />
              <span>Total recipes available: {databasePopulationService.philippineRecipes.length}</span>
            </div>
          </div>
          
          {isPopulating && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>{populationStatus}</span>
                <span>{populatedCount} of {recipeCount}</span>
              </div>
              <Progress value={populationProgress} className="h-2" />
            </div>
          )}
          
          <div className="space-y-2">
            <label htmlFor="recipeCount" className="text-sm font-medium">
              Number of recipes to populate:
            </label>
            <input
              id="recipeCount"
              type="range"
              min="1"
              max={databasePopulationService.philippineRecipes.length}
              value={recipeCount}
              onChange={(e) => setRecipeCount(parseInt(e.target.value))}
              className="w-full"
              disabled={isPopulating}
            />
            <div className="text-sm text-center">
              {recipeCount} recipes
            </div>
          </div>
          
          <Button 
            className="w-full" 
            onClick={handlePopulateMultipleRecipes} 
            disabled={isPopulating}
          >
            {isPopulating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Populating...
              </>
            ) : (
              <>
                <Utensils className="mr-2 h-4 w-4" />
                Populate {recipeCount} Recipes
              </>
            )}
          </Button>
          
          <div className="flex space-x-2">
            <Button 
              className="flex-1" 
              variant="outline" 
              onClick={handlePopulateSingleRecipe} 
              disabled={isPopulating}
            >
              Add Single Recipe
            </Button>
          </div>
          
          <div className="grid grid-cols-2 gap-2">
            <Link to="/admin/recipes">
              <Button 
                className="w-full" 
                variant="secondary" 
              >
                <BookOpen className="mr-2 h-4 w-4" />
                Manage Recipes
              </Button>
            </Link>
            
            <Link to="/admin/import">
              <Button 
                className="w-full" 
                variant="secondary" 
              >
                <FileUp className="mr-2 h-4 w-4" />
                Import Data
              </Button>
            </Link>
          </div>
        </CardContent>
        
        <CardFooter>
          <Button 
            className="w-full" 
            variant="default" 
            onClick={handlePopulateDatabase} 
            disabled={isPopulating}
          >
            {isPopulating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Populating Database...
              </>
            ) : (
              <>
                <Database className="mr-2 h-4 w-4" />
                Populate Full Database
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default AdminPage;
